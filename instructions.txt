01  terraform.tf 
    aws provider   


02  providers.tf
    here region defined

03 ec2.tf
    ec2 instance
    https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/key_pair
    https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_vpc
    https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_security_group

04 ssh gen
   ssh keygen
   terra-key

05 terraform init
06 terraform plan

07 allow permissions to user
   iam -> users -> terra-ali -> add permissions -> addminstratorAccess ->save

08 terraform apply -auto-approve
09 terraform destroy -auto-approve

10 variables work
   variables.tf


11 output (ec2 output like a ip etc all)
   outputs.tf

   output:
        ghulam@ghulam-HP-ProBook-650-G5:/var/www/html/terraform-for-devops/terraform-learning$ terraform apply -auto-approve
        aws_key_pair.my_key: Refreshing state... [id=terra-key]
        aws_default_vpc.default: Refreshing state... [id=vpc-09208225745dbbf45]
        aws_security_group.my_security_group: Refreshing state... [id=sg-077e1d391795fc2ec]
        aws_instance.my_instance: Refreshing state... [id=i-0f7fffd7c2ee5a426]

        Changes to Outputs:
            + ec2_pirvate_ip = "172.31.12.145"
            + ec2_public_dns = "ec2-43-204-229-125.ap-south-1.compute.amazonaws.com"
            + ec2_public_ip  = "43.204.229.125"

        You can apply this plan to save these new output values to the Terraform state, without changing any real infrastructure.

        Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

        Outputs:

        ec2_pirvate_ip = "172.31.12.145"
        ec2_public_dns = "ec2-43-204-229-125.ap-south-1.compute.amazonaws.com"
        ec2_public_ip = "43.204.229.125"

12 install nginx
    install_nginx.sh


13 multi instance creation
    01- add 'count in my_instance block
    02- also change the output, about ip's

14 instances types (spot[bidding due to large instance available]/on-demaind[fix price of each, due to short instance available])
    :- this point only for knowldge. 

15 'meta argument', second way for multi instance creation
    foreach ratherthen a 'count = 3'
    also change output, in case of foreach

    note: each used to provent same instance name or otherthing repeation

16 depends_on meta argument
    depends_on = [ aws_security_group.my_security_group, aws_key_pair.my_key ]

17  Most Important Topic
    => Terraform State Management & Backends
        -> Role of state in infrastructure Management
        -> Secure state Management best practices
        -> Remote state Backends
            . AWS S3 for Remotef storage
            . State Locking with DynamoDB

18  All states listing
    terraform state list

19  Specific State Details        
    terraform state show aws_key_pair.my_key


20  if deleted a any state.
    terraform rm aws_key_pair.my_key

    can be recovered via a import from  aws.
    for example: 
                terraform import aws_key_pair.my_key key-id-from-aws


21  Secure state
    Issue: we can't push a state file on a git, second if two developers have a seprate states files
           with a different instance counts.
    
    sol: 
        -> Remote state Backends
            . AWS S3 for Remote storage
            . State Locking with DynamoDB(schema less, no table etc)

21  new folder 'remote-infra'
        s3.tf file
           https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket

        dynamodb.tf file
            https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table
    
        providers.tf
            region defined
            
        terraform.tf
            https://registry.terraform.io/providers/hashicorp/aws/latest/docs

        run below commands in 'remote-infra' table.
            terraform init
            terraform plan
            terraform apply -auto-approve



22  define a Backend in root path terraform.tf, provider block
23  terraform init (due to change in terraform.tf file) 
24  terraform plan
25  terraform apply -auto-approve
26  terraform state list
27  terraform Refresh
28  delete the state file or backup from, root, but state list is still showing details due to lock file
29  terraform state list


30  terraform workspace list
    showing default.
    Note: same concept as a branches in git. here workspaces.

31  terraform workspace new dev
32  terraform workspace select default
    output: switched to workspace 'default'
